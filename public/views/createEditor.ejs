<%- include('partials/header') %>

<div class="form-container">
  <h1>üë§ Create New Editor</h1>
  
  <% if (error) { %>
    <div class="error"><%= error %></div>
  <% } %>

  <form method="post" action="/admin/editors/new">
    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
      <div>
        <label for="name">Full Name *</label>
        <input type="text" id="name" name="name" required placeholder="Enter editor's full name">
      </div>
      
      <div>
        <label for="email">Email Address *</label>
        <input type="email" id="email" name="email" required placeholder="editor@example.com">
      </div>
    </div>

    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
      <div>
        <label for="password">Password *</label>
        <input type="password" id="password" name="password" required placeholder="Minimum 6 characters">
      </div>
      
      <div>
        <label for="confirmPassword">Confirm Password *</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Confirm password">
      </div>
    </div>

    <div>
      <label for="role">Role *</label>
      <select id="role" name="role" required>
        <option value="editor">Editor</option>
        <option value="senior_editor">Senior Editor</option>
        <option value="admin_editor">Admin Editor</option>
      </select>
    </div>

    <div class="permissions-section">
      <h3>üîê Permissions</h3>
      <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-top: 1rem;">
        <label class="checkbox-label">
          <input type="checkbox" name="permissions[canCreateTransactions]" value="true" checked>
          <span>Create Transactions</span>
        </label>
        
        <label class="checkbox-label">
          <input type="checkbox" name="permissions[canUploadReceipts]" value="true" checked>
          <span>Upload Receipts</span>
        </label>
        
        <label class="checkbox-label">
          <input type="checkbox" name="permissions[canEditBudgets]" value="true">
          <span>Edit Budgets</span>
        </label>
        
        <label class="checkbox-label">
          <input type="checkbox" name="permissions[canApproveTransactions]" value="true">
          <span>Approve Transactions</span>
        </label>
      </div>
    </div>

    <div class="form-actions">
      <button type="submit">Create Editor</button>
      <a href="/admin/editors">
        <button type="button" class="btn-secondary">Cancel</button>
      </a>
    </div>
  </form>
</div>

<style>
.checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem;
  background: rgba(241, 245, 249, 0.5);
  border-radius: 6px;
  cursor: pointer;
  transition: var(--transition);
  border: 2px solid transparent;
}

.checkbox-label:hover {
  background: rgba(37, 99, 235, 0.05);
  border-color: rgba(37, 99, 235, 0.2);
}

.checkbox-label input[type="checkbox"] {
  width: auto;
  margin: 0;
}

.permissions-section {
  margin: 2rem 0;
  padding: 1.5rem;
  background: rgba(241, 245, 249, 0.3);
  border-radius: var(--border-radius);
  border: 1px solid rgba(226, 232, 240, 0.5);
}

.permissions-section h3 {
  margin-bottom: 1rem;
  color: var(--primary-color);
  font-size: 1.1rem;
}

.form-actions {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.btn-secondary {
  background: linear-gradient(135deg, #64748b, #475569);
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: var(--border-radius);
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  text-decoration: none;
  display: inline-block;
  text-align: center;
}

.btn-secondary:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-medium);
  background: linear-gradient(135deg, #475569, #334155);
}

label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--secondary-color);
}
</style>

<script>
document.getElementById('confirmPassword').addEventListener('input', function() {
  const password = document.getElementById('password').value;
  const confirmPassword = this.value;
  
  if (password !== confirmPassword) {
    this.setCustomValidity('Passwords do not match');
  } else {
    this.setCustomValidity('');
  }
});

document.getElementById('password').addEventListener('input', function() {
  const confirmPassword = document.getElementById('confirmPassword');
  if (confirmPassword.value) {
    if (this.value !== confirmPassword.value) {
      confirmPassword.setCustomValidity('Passwords do not match');
    } else {
      confirmPassword.setCustomValidity('');
    }
  }
});

// Auto-generate password suggestion
document.getElementById('password').addEventListener('focus', function() {
  if (!this.value) {
    const suggestedPassword = generatePassword();
    this.placeholder = `Suggested: ${suggestedPassword}`;
  }
});

function generatePassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = '';
  for (let i = 0; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}
</script>

<%- include('partials/footer') %>
