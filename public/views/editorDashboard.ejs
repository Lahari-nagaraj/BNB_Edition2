<%- include('partials/header') %>
<div class="dashboard-container">
  <div class="dashboard-header">
    <h2>📝 Editor Dashboard</h2>
    <div class="user-info">
      <span class="user-name">Welcome, <%= session.userName %></span>
      <div class="user-stats">
        <span class="stat">Level <%= user.level %></span>
        <span class="stat">⭐ <%= user.points %> points</span>
        <span class="stat">🏆 <%= user.badges.length %> badges</span>
      </div>
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="stats-grid">
    <div class="stat-card">
      <h3>📊 Assigned Budgets</h3>
      <p class="stat-number"><%= assignedBudgets.length %></p>
    </div>
    <div class="stat-card">
      <h3>📋 Pending Transactions</h3>
      <p class="stat-number"><%= pendingTransactions %></p>
    </div>
    <div class="stat-card">
      <h3>✅ Approved Today</h3>
      <p class="stat-number"><%= approvedToday %></p>
    </div>
    <div class="stat-card">
      <h3>📄 Receipts Uploaded</h3>
      <p class="stat-number"><%= user.receiptsUploaded %></p>
    </div>
  </div>

  <!-- Badges Section -->
  <% if (user.badges && user.badges.length > 0) { %>
  <div class="dashboard-section">
    <h3>🏆 Your Badges</h3>
    <div class="badges-grid">
      <% user.badges.forEach(badge => { %>
      <div class="badge-item">
        <div class="badge-icon"><%= badge.icon %></div>
        <div class="badge-info">
          <h4><%= badge.name %></h4>
          <p><%= badge.description %></p>
          <small
            >Earned: <%= new Date(badge.earnedAt).toLocaleDateString() %></small
          >
        </div>
      </div>
      <% }) %>
    </div>
  </div>
  <% } %>

  <!-- Assigned Budgets -->
  <div class="dashboard-section">
    <h3>📊 Your Assigned Budgets</h3>
    <div class="cards">
      <% assignedBudgets.forEach(budget => { %>
      <div class="card">
        <div class="card-header">
          <h4><%= budget.name %></h4>
          <span class="status-badge status-<%= budget.status %>"
            ><%= budget.status %></span
          >
        </div>
        <p><strong>Department:</strong> <%= budget.department %></p>
        <p>
          <strong>Total Budget:</strong> ₹<%=
          budget.totalBudget.toLocaleString() %>
        </p>
        <p>
          <strong>Remaining:</strong> ₹<%= budget.remaining.toLocaleString() %>
        </p>
        <div class="progress-bar">
          <div
            class="progress-fill"
            style="width: <%= (budget.spent / budget.totalBudget * 100) %>%"
          ></div>
        </div>
        <div class="card-actions">
          <a href="/editor/budget/<%= budget._id %>"
            ><button>Manage Budget</button></a
          >
          <a href="/editor/budget/<%= budget._id %>/transactions"
            ><button class="btn-secondary">View Transactions</button></a
          >
        </div>
      </div>
      <% }) %>
    </div>
  </div>

  <!-- Recent Transactions -->
  <div class="dashboard-section">
    <h3>📋 Recent Transactions</h3>
    <div class="transactions-list">
      <% recentTransactions.forEach(transaction => { %>
      <div class="transaction-item">
        <div class="transaction-info">
          <h4><%= transaction.description %></h4>
          <p>Amount: ₹<%= transaction.amount.toLocaleString() %></p>
          <p>
            Date: <%= new Date(transaction.createdAt).toLocaleDateString() %>
          </p>
        </div>
        <div class="transaction-status">
          <span class="status-badge status-<%= transaction.status %>"
            ><%= transaction.status %></span
          >
          <% if (transaction.receipt && transaction.receipt.url) { %>
          <span class="receipt-badge">📄 Receipt</span>
          <% } %>
        </div>
      </div>
      <% }) %>
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="dashboard-section">
    <h3>⚡ Quick Actions</h3>
    <div class="quick-actions">
      <button onclick="showAddTransactionModal()" class="btn-primary">➕ Add Transaction</button>
      <a href="/editor/receipts/upload"
        ><button class="btn-secondary">📄 Upload Receipt</button></a
      >
      <a href="/editor/transactions/pending"
        ><button class="btn-secondary">⏳ Pending Approvals</button></a
      >
    </div>
  </div>

  <!-- AI Assistant -->
  <div class="dashboard-section">
    <h3>🤖 AI Assistant</h3>
    <div class="ai-chat-container">
      <div id="ai-messages" class="ai-messages"></div>
      <div class="ai-input">
        <input
          type="text"
          id="ai-input"
          placeholder="Ask me about your budgets, transactions, or receipts..."
        />
        <button id="ai-send">Send</button>
      </div>
    </div>
  </div>
</div>

<style>
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 2rem;
    background: var(--card-gradient);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-light);
  }

  .user-info {
    text-align: right;
  }

  .user-name {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    display: block;
    margin-bottom: 0.5rem;
  }

  .user-stats {
    display: flex;
    gap: 1rem;
  }

  .user-stats .stat {
    background: rgba(37, 99, 235, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.9rem;
    color: var(--primary-color);
    font-weight: 500;
  }

  .badges-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  .badge-item {
    display: flex;
    align-items: center;
    background: var(--card-gradient);
    padding: 1rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
    border-left: 4px solid var(--accent-color);
  }

  .badge-icon {
    font-size: 2rem;
    margin-right: 1rem;
  }

  .badge-info h4 {
    margin: 0 0 0.25rem 0;
    color: #1e293b;
    font-family: "Montserrat", sans-serif;
  }

  .badge-info p {
    margin: 0 0 0.25rem 0;
    color: #64748b;
    font-size: 0.9rem;
  }

  .badge-info small {
    color: #94a3b8;
    font-size: 0.8rem;
  }

  .transactions-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .transaction-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--card-gradient);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
  }

  .transaction-info h4 {
    margin: 0 0 0.5rem 0;
    color: #1e293b;
    font-family: "Montserrat", sans-serif;
  }

  .transaction-info p {
    margin: 0.25rem 0;
    color: #64748b;
    font-size: 0.9rem;
  }

  .transaction-status {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.5rem;
  }

  .receipt-badge {
    background: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .ai-chat-container {
    background: var(--card-gradient);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-light);
    overflow: hidden;
  }

  .ai-messages {
    height: 300px;
    overflow-y: auto;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.5);
  }

  .ai-message {
    margin-bottom: 1rem;
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius);
    max-width: 80%;
  }

  .ai-message.user {
    background: var(--primary-color);
    color: white;
    margin-left: auto;
  }

  .ai-message.bot {
    background: rgba(37, 99, 235, 0.1);
    color: #1e293b;
  }

  .ai-input {
    display: flex;
    padding: 1rem;
    background: white;
    border-top: 1px solid rgba(226, 232, 240, 0.5);
  }

  .ai-input input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
    border-radius: var(--border-radius);
    margin-right: 0.5rem;
  }

  .ai-input button {
    padding: 0.75rem 1.5rem;
    white-space: nowrap;
  }

  .quick-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-secondary {
    background: #64748b;
    color: white;
  }

  @media (max-width: 768px) {
    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .user-stats {
      flex-direction: column;
      gap: 0.5rem;
    }

    .transaction-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .transaction-status {
      align-items: flex-start;
    }

    .quick-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const messagesContainer = document.getElementById("ai-messages");
    const input = document.getElementById("ai-input");
    const sendButton = document.getElementById("ai-send");

    function addMessage(content, isUser = false) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `ai-message ${isUser ? "user" : "bot"}`;
      messageDiv.textContent = content;
      messagesContainer.appendChild(messageDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    async function sendMessage() {
      const message = input.value.trim();
      if (!message) return;

      addMessage(message, true);
      input.value = "";

      try {
        const response = await fetch("/api/chatbot", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            message: message,
            context: {
              userId: "<%= user._id %>",
              userRole: "editor",
              assignedBudgets:
                '<%= assignedBudgets.map(b => b._id).join(",") %>',
            },
          }),
        });

        const data = await response.json();
        addMessage(data.reply || data.response || "No response received");
      } catch (error) {
        addMessage("Sorry, I encountered an error. Please try again.");
      }
    }

    sendButton.addEventListener("click", sendMessage);
    input.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        sendMessage();
      }
    });
  });
</script>

<!-- Add Transaction Modal -->
<div id="addTransactionModal" class="modal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h3>➕ Add New Transaction</h3>
      <span class="close" onclick="closeAddTransactionModal()">&times;</span>
    </div>
    <form id="editorTransactionForm" enctype="multipart/form-data">
      <div class="form-row">
        <div class="form-group">
          <label for="editorDepartment">Select Department *</label>
          <select id="editorDepartment" name="department" required onchange="updateEditorBudgetOptions()">
            <option value="">Choose a department...</option>
            <% 
              const editorDepartments = [...new Set(assignedBudgets.map(b => b.department))];
              editorDepartments.forEach(dept => { 
            %>
              <option value="<%= dept %>"><%= dept %></option>
            <% }) %>
          </select>
        </div>
        
        <div class="form-group">
          <label for="editorBudgetId">Select Project *</label>
          <select id="editorBudgetId" name="budgetId" required disabled>
            <option value="">First select a department...</option>
          </select>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="editorCategory">Category</label>
          <select id="editorCategory" name="category">
            <option value="">Select category...</option>
            <option value="office_supplies">Office Supplies</option>
            <option value="travel">Travel</option>
            <option value="equipment">Equipment</option>
            <option value="utilities">Utilities</option>
            <option value="maintenance">Maintenance</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="editorVendor">Vendor/Supplier</label>
          <input type="text" id="editorVendor" name="vendor" placeholder="Enter vendor name">
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="editorDescription">Description *</label>
          <input type="text" id="editorDescription" name="description" required placeholder="Enter transaction description">
        </div>
        
        <div class="form-group">
          <label for="editorAmount">Amount (₹) *</label>
          <input type="number" id="editorAmount" name="amount" step="0.01" required placeholder="0.00">
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="editorDate">Date</label>
          <input type="date" id="editorDate" name="date">
        </div>
        
        <div class="form-group">
          <label for="editorPriority">Priority</label>
          <select id="editorPriority" name="priority">
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label for="editorReceipt">Receipt Upload</label>
        <div class="file-upload-area" id="editorFileUploadArea">
          <div class="upload-icon">📁</div>
          <p>Drop receipt here or click to browse</p>
          <p class="file-types">Supports JPG, PNG, PDF files up to 10MB</p>
          <input type="file" id="editorReceipt" name="receipt" accept="image/*,.pdf" style="display: none;">
          <button type="button" onclick="document.getElementById('editorReceipt').click()">Choose File</button>
        </div>
      </div>

      <div class="form-group">
        <label for="editorNotes">Notes</label>
        <textarea id="editorNotes" name="notes" rows="3" placeholder="Additional notes..."></textarea>
      </div>

      <div class="form-actions">
        <button type="submit" id="editorSubmitBtn">Create Transaction</button>
        <button type="button" onclick="closeAddTransactionModal()" class="btn-secondary">Cancel</button>
      </div>
    </form>
  </div>
</div>

<style>
.modal {
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  box-sizing: border-box;
}

.modal-content {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
  max-width: 600px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  margin: auto;
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #e2e8f0;
}

.modal-header h3 {
  margin: 0;
  color: #1e293b;
}

.close {
  font-size: 1.5rem;
  font-weight: bold;
  cursor: pointer;
  color: #64748b;
}

.close:hover {
  color: #1e293b;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #374151;
}

.form-group select,
.form-group input,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  box-sizing: border-box;
}

.form-group textarea {
  resize: vertical;
}

.file-upload-area {
  border: 2px dashed #d1d5db;
  border-radius: 8px;
  padding: 2rem;
  text-align: center;
  background: #f9fafb;
  transition: all 0.3s ease;
}

.file-upload-area:hover {
  border-color: var(--primary-color);
  background: rgba(59, 130, 246, 0.05);
}

.upload-icon {
  font-size: 2rem;
  margin-bottom: 0.5rem;
}

.file-types {
  font-size: 0.8rem;
  color: #6b7280;
  margin: 0.5rem 0;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding: 1.5rem;
  border-top: 1px solid #e2e8f0;
}

.btn-primary {
  background: var(--primary-color);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-primary:hover {
  background: var(--primary-dark);
  transform: translateY(-1px);
}

.btn-secondary {
  background: #6b7280;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  background: #4b5563;
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .form-actions {
    flex-direction: column;
  }
}
</style>

<script type="application/json" id="assigned-budgets-data"><%- JSON.stringify(assignedBudgets) %></script>
<script>
// Get assigned budgets data from JSON script tag
const assignedBudgetsDataScript = document.getElementById('assigned-budgets-data');
window.assignedBudgetsData = assignedBudgetsDataScript ? JSON.parse(assignedBudgetsDataScript.textContent) : [];

function showAddTransactionModal() {
  document.getElementById('addTransactionModal').style.display = 'flex';
}

function closeAddTransactionModal() {
  document.getElementById('addTransactionModal').style.display = 'none';
}

// Department-based budget filtering for editor
function updateEditorBudgetOptions() {
  const departmentSelect = document.getElementById('editorDepartment');
  const budgetSelect = document.getElementById('editorBudgetId');
  const selectedDepartment = departmentSelect.value;
  
  // Clear existing options
  budgetSelect.innerHTML = '<option value="">Choose a project...</option>';
  
  if (selectedDepartment) {
    budgetSelect.disabled = false;
    
    // Filter budgets by selected department
    const budgets = window.assignedBudgetsData || [];
    const filteredBudgets = budgets.filter(budget => budget.department === selectedDepartment);
    
    filteredBudgets.forEach(budget => {
      const option = document.createElement('option');
      option.value = budget._id;
      option.textContent = `${budget.name} (₹${budget.totalBudget.toLocaleString()})`;
      budgetSelect.appendChild(option);
    });
  } else {
    budgetSelect.disabled = true;
    budgetSelect.innerHTML = '<option value="">First select a department...</option>';
  }
}

// Handle file selection for editor
document.getElementById('editorReceipt').addEventListener('change', function(event) {
  const file = event.target.files[0];
  if (file) {
    const uploadArea = document.getElementById('editorFileUploadArea');
    uploadArea.innerHTML = `
      <div class="file-preview">
        <div class="file-info">
          <h4>${file.name}</h4>
          <p>${formatFileSize(file.size)}</p>
          <button type="button" onclick="resetEditorFileUpload()">Remove</button>
        </div>
      </div>
    `;
  }
});

function resetEditorFileUpload() {
  const uploadArea = document.getElementById('editorFileUploadArea');
  uploadArea.innerHTML = `
    <div class="upload-icon">📁</div>
    <p>Drop receipt here or click to browse</p>
    <p class="file-types">Supports JPG, PNG, PDF files up to 10MB</p>
    <input type="file" id="editorReceipt" name="receipt" accept="image/*,.pdf" style="display: none;">
    <button type="button" onclick="document.getElementById('editorReceipt').click()">Choose File</button>
  `;
  document.getElementById('editorReceipt').addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      const uploadArea = document.getElementById('editorFileUploadArea');
      uploadArea.innerHTML = `
        <div class="file-preview">
          <div class="file-info">
            <h4>${file.name}</h4>
            <p>${formatFileSize(file.size)}</p>
            <button type="button" onclick="resetEditorFileUpload()">Remove</button>
          </div>
        </div>
      `;
    }
  });
}

// Handle editor transaction form submission
document.getElementById('editorTransactionForm').addEventListener('submit', async function(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const submitBtn = document.getElementById('editorSubmitBtn');
  
  const description = formData.get('description');
  const amount = formData.get('amount');
  const budgetId = formData.get('budgetId');
  const department = formData.get('department');
  
  if (!description || !amount || !budgetId || !department) {
    alert('Please fill in all required fields including department and project selection');
    return;
  }
  
  submitBtn.disabled = true;
  submitBtn.textContent = 'Creating Transaction...';
  
  try {
    const response = await fetch('/editor/transaction/new', {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
    }
    
    const result = await response.json();
    
    if (result.success) {
      alert('Transaction created successfully!');
      closeAddTransactionModal();
      window.location.reload();
    } else {
      alert('Failed to create transaction: ' + result.error);
    }
  } catch (error) {
    console.error('Error creating transaction:', error);
    alert('Error creating transaction: ' + error.message);
  } finally {
    submitBtn.disabled = false;
    submitBtn.textContent = 'Create Transaction';
  }
});

function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Close modal when clicking outside
window.onclick = function(event) {
  const modal = document.getElementById('addTransactionModal');
  if (event.target === modal) {
    closeAddTransactionModal();
  }
}
</script>

<%- include('partials/footer') %>
