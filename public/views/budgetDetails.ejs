<%- include('partials/header') %>
<div class="container">
  <div class="budget-header">
    <h2><%= budget.name %></h2>
    <span class="status-badge status-<%= budget.status %>"><%= budget.status %></span>
  </div>
  
  <div class="budget-info">
    <div class="info-grid">
      <div class="info-item">
        <strong>Department:</strong> <%= budget.department %>
      </div>
      <div class="info-item">
        <strong>State:</strong> <%= budget.state %>
      </div>
      <div class="info-item">
        <strong>Country:</strong> <%= budget.country %>
      </div>
      <div class="info-item">
        <strong>Total Budget:</strong> ‚Çπ<%= budget.totalBudget.toLocaleString() %>
      </div>
      <div class="info-item">
        <strong>Spent:</strong> ‚Çπ<%= budget.spent.toLocaleString() %>
      </div>
      <div class="info-item">
        <strong>Remaining:</strong> ‚Çπ<%= budget.remaining.toLocaleString() %>
      </div>
      <div class="info-item">
        <strong>Fiscal Year:</strong> <%= budget.fiscalYear %>
      </div>
      <div class="info-item">
        <strong>Approved By:</strong> <%= budget.approvedBy %>
      </div>
      <div class="info-item">
        <strong>Type:</strong> <%= budget.type %>
      </div>
    </div>
    
    <div class="progress-section">
      <h3>Budget Utilization</h3>
      <div class="progress-bar large">
        <div class="progress-fill" style="width: <%= (budget.spent / budget.totalBudget * 100) %>%"></div>
      </div>
      <p class="progress-text"><%= ((budget.spent / budget.totalBudget) * 100).toFixed(1) %>% utilized</p>
    </div>
  </div>

  <div class="hierarchy-section">
    <h3>Fund Flow Hierarchy</h3>
    <div class="hierarchy-flow">
      <div class="hierarchy-item">
        <h4>üìä Budget</h4>
        <p><%= budget.name %></p>
        <p>‚Çπ<%= budget.totalBudget.toLocaleString() %></p>
      </div>
      <div class="arrow">‚Üì</div>
      <div class="hierarchy-item">
        <h4>üè¢ Departments</h4>
        <p>Manage departmental allocations</p>
        <a href="/budget/<%= budget._id %>/departments"><button>View Departments</button></a>
      </div>
      <div class="arrow">‚Üì</div>
      <div class="hierarchy-item">
        <h4>üìã Projects</h4>
        <p>Track project-specific spending</p>
      </div>
      <div class="arrow">‚Üì</div>
      <div class="hierarchy-item">
        <h4>üè™ Vendors</h4>
        <p>Manage vendor relationships</p>
      </div>
      <div class="arrow">‚Üì</div>
      <div class="hierarchy-item">
        <h4>üí∞ Transactions</h4>
        <p>Individual expense tracking</p>
      </div>
    </div>
  </div>

  <div class="actions-section">
    <% if(session.userId && session.userId.toString() === budget.creator._id.toString()){ %>
    <a href="/budget/<%= budget._id %>/edit"><button>Edit Budget</button></a>
    <a href="/budget/<%= budget._id %>/departments"><button class="btn-primary">Manage Departments</button></a>
    <% } %>
    <% if(session.isAdmin && budget.status === 'pending'){ %>
    <form method="post" action="/budget/<%= budget._id %>/approve" style="display: inline;">
      <button type="submit" class="btn-approve">Approve Budget</button>
    </form>
    <% } %>
  </div>

  <!-- Receipt Upload Section -->
  <% if(session.userRole === 'editor' || session.isAdmin){ %>
  <div class="receipt-upload-section">
    <h3>üìÑ Add Expense with Receipt</h3>
    <form id="expenseForm" enctype="multipart/form-data">
      <div class="form-row">
        <div class="form-group">
          <label for="description">Description *</label>
          <input type="text" id="description" name="description" required placeholder="Enter expense description">
        </div>
        <div class="form-group">
          <label for="amount">Amount (‚Çπ) *</label>
          <input type="number" id="amount" name="amount" step="0.01" required placeholder="0.00">
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="category">
            <option value="">Select category...</option>
            <option value="office_supplies">Office Supplies</option>
            <option value="travel">Travel</option>
            <option value="equipment">Equipment</option>
            <option value="utilities">Utilities</option>
            <option value="maintenance">Maintenance</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="form-group">
          <label for="vendor">Vendor/Supplier</label>
          <input type="text" id="vendor" name="vendor" placeholder="Enter vendor name">
        </div>
      </div>

      <div class="form-group">
        <label for="receipt">Receipt Upload</label>
        <div class="file-upload-area" id="fileUploadArea">
          <div class="upload-icon">üìÅ</div>
          <p>Drop receipt here or click to browse</p>
          <input type="file" id="receipt" name="receipt" accept="image/*,.pdf" style="display: none;">
          <button type="button" onclick="document.getElementById('receipt').click()">Choose File</button>
        </div>
        <div class="file-preview" id="filePreview" style="display: none;">
          <img id="previewImage" src="" alt="Receipt Preview">
          <div class="file-info">
            <h4 id="fileName"></h4>
            <p id="fileSize"></p>
            <button type="button" onclick="removeFile()">Remove</button>
          </div>
        </div>
      </div>

      <div class="form-group">
        <label for="notes">Notes</label>
        <textarea id="notes" name="notes" rows="3" placeholder="Additional notes..."></textarea>
      </div>

      <div class="ocr-section" id="ocrSection" style="display: none;">
        <h4>ü§ñ OCR Extracted Data</h4>
        <div class="ocr-results" id="ocrResults"></div>
        <button type="button" onclick="useOCRData()" class="btn-ai">Use OCR Data</button>
      </div>

      <div class="form-actions">
        <button type="submit" id="submitBtn">Add Expense</button>
        <button type="button" onclick="clearForm()" class="btn-secondary">Clear</button>
      </div>
    </form>
  </div>
  <% } %>

  <!-- Legacy expenses section for backward compatibility -->
  <% if(budget.expenses && budget.expenses.length > 0) { %>
  <div class="legacy-expenses">
    <h3>Legacy Expenses</h3>
    <ul>
    <% budget.expenses.forEach(e=>{ %>
    <li><strong><%= e.description %></strong> - ‚Çπ<%= e.amount.toLocaleString() %> (Allocated to: <%= e.allocatedTo %>)</li>
    <% }) %>
    </ul>
  </div>
  <% } %>
</div>

<style>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.budget-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.info-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.info-item {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 8px;
}

.progress-section {
  background: #fff;
  padding: 1.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.05);
  margin-bottom: 2rem;
}

.progress-bar.large {
  height: 20px;
  background: #e9ecef;
  border-radius: 10px;
  overflow: hidden;
  margin: 1rem 0;
}

.progress-text {
  text-align: center;
  font-weight: bold;
  color: #007bff;
}

.hierarchy-section {
  background: #fff;
  padding: 1.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.05);
  margin-bottom: 2rem;
}

.hierarchy-flow {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.hierarchy-item {
  background: #f8f9fa;
  padding: 1.5rem;
  border-radius: 12px;
  text-align: center;
  min-width: 200px;
  border: 2px solid #e9ecef;
}

.hierarchy-item h4 {
  margin-bottom: 0.5rem;
  color: #007bff;
}

.arrow {
  font-size: 2rem;
  color: #007bff;
  font-weight: bold;
}

.actions-section {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
}

.btn-primary {
  background: #007bff;
  color: white;
}

.btn-approve {
  background: #28a745;
  color: white;
}

.legacy-expenses {
  background: #fff3cd;
  padding: 1.5rem;
  border-radius: 12px;
  border-left: 4px solid #ffc107;
}

/* Receipt Upload Styles */
.receipt-upload-section {
  background: #fff;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.05);
  margin-bottom: 2rem;
}

.form-row {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  background: white;
  transition: all 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.file-upload-area {
  border: 2px dashed #cbd5e1;
  border-radius: 12px;
  padding: 2rem;
  text-align: center;
  background: rgba(241, 245, 249, 0.3);
  transition: all 0.3s ease;
  cursor: pointer;
}

.file-upload-area:hover {
  border-color: #007bff;
  background: rgba(0, 123, 255, 0.05);
}

.file-upload-area.dragover {
  border-color: #007bff;
  background: rgba(0, 123, 255, 0.1);
}

.upload-icon {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.file-preview {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
}

.file-preview img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
}

.file-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.ocr-section {
  margin: 1.5rem 0;
  padding: 1rem;
  background: rgba(0, 123, 255, 0.05);
  border-radius: 8px;
  border: 1px solid rgba(0, 123, 255, 0.2);
}

.ocr-results {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  margin: 1rem 0;
  border: 1px solid #e2e8f0;
}

.ocr-item {
  display: flex;
  justify-content: space-between;
  padding: 0.5rem 0;
  border-bottom: 1px solid #f1f5f9;
}

.ocr-item:last-child {
  border-bottom: none;
}

.ocr-label {
  font-weight: 600;
  color: #64748b;
}

.ocr-value {
  color: #007bff;
}

.form-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
}

.btn-secondary {
  background: #6c757d;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  background: #5a6268;
  transform: translateY(-2px);
}

.btn-ai {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-ai:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

@media (max-width: 768px) {
  .hierarchy-flow {
    flex-direction: column;
  }
  
  .arrow {
    transform: rotate(90deg);
  }
  
  .actions-section {
    flex-direction: column;
  }
  
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .form-actions {
    flex-direction: column;
  }
}
</style>

<script>
let ocrData = null;

// File upload handling
document.getElementById('receipt').addEventListener('change', handleFileSelect);
document.getElementById('fileUploadArea').addEventListener('click', () => document.getElementById('receipt').click());
document.getElementById('fileUploadArea').addEventListener('dragover', handleDragOver);
document.getElementById('fileUploadArea').addEventListener('drop', handleDrop);
document.getElementById('expenseForm').addEventListener('submit', handleSubmit);

function handleFileSelect(event) {
  const file = event.target.files[0];
  if (file) {
    displayFilePreview(file);
    processReceipt(file);
  }
}

function handleDragOver(event) {
  event.preventDefault();
  document.getElementById('fileUploadArea').classList.add('dragover');
}

function handleDrop(event) {
  event.preventDefault();
  document.getElementById('fileUploadArea').classList.remove('dragover');
  
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    document.getElementById('receipt').files = files;
    displayFilePreview(files[0]);
    processReceipt(files[0]);
  }
}

function displayFilePreview(file) {
  const preview = document.getElementById('filePreview');
  const uploadArea = document.getElementById('fileUploadArea');
  
  uploadArea.style.display = 'none';
  preview.style.display = 'flex';
  
  document.getElementById('fileName').textContent = file.name;
  document.getElementById('fileSize').textContent = formatFileSize(file.size);
  
  if (file.type.startsWith('image/')) {
    const reader = new FileReader();
    reader.onload = function(e) {
      document.getElementById('previewImage').src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
}

function removeFile() {
  document.getElementById('filePreview').style.display = 'none';
  document.getElementById('fileUploadArea').style.display = 'block';
  document.getElementById('receipt').value = '';
  document.getElementById('ocrSection').style.display = 'none';
  ocrData = null;
}

function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function processReceipt(file) {
  const formData = new FormData();
  formData.append('image', file);
  
  try {
    const response = await fetch('/api/ocr/process', {
      method: 'POST',
      body: formData
    });
    
    const result = await response.json();
    
    if (result.success) {
      ocrData = result.data;
      displayOCRResults(result.data);
    } else {
      console.error('OCR processing failed:', result.error);
    }
  } catch (error) {
    console.error('Error processing receipt:', error);
  }
}

function displayOCRResults(data) {
  const ocrSection = document.getElementById('ocrSection');
  const ocrResults = document.getElementById('ocrResults');
  
  ocrSection.style.display = 'block';
  
  let html = '';
  if (data.vendor) html += `<div class="ocr-item"><span class="ocr-label">Vendor:</span><span class="ocr-value">${data.vendor}</span></div>`;
  if (data.amount) html += `<div class="ocr-item"><span class="ocr-label">Amount:</span><span class="ocr-value">‚Çπ${data.amount}</span></div>`;
  if (data.date) html += `<div class="ocr-item"><span class="ocr-label">Date:</span><span class="ocr-value">${data.date}</span></div>`;
  if (data.total) html += `<div class="ocr-item"><span class="ocr-label">Total:</span><span class="ocr-value">‚Çπ${data.total}</span></div>`;
  if (data.tax) html += `<div class="ocr-item"><span class="ocr-label">Tax:</span><span class="ocr-value">‚Çπ${data.tax}</span></div>`;
  
  if (data.items && data.items.length > 0) {
    html += '<div class="ocr-item"><span class="ocr-label">Items:</span><span class="ocr-value"></span></div>';
    data.items.forEach(item => {
      html += `<div class="ocr-item" style="margin-left: 1rem;"><span class="ocr-label">${item.description}</span><span class="ocr-value">‚Çπ${item.amount}</span></div>`;
    });
  }
  
  ocrResults.innerHTML = html;
}

function useOCRData() {
  if (!ocrData) return;
  
  if (ocrData.vendor) document.getElementById('vendor').value = ocrData.vendor;
  if (ocrData.amount) document.getElementById('amount').value = ocrData.amount;
  
  // Auto-fill description if not already filled
  if (!document.getElementById('description').value && ocrData.vendor) {
    document.getElementById('description').value = `Payment to ${ocrData.vendor}`;
  }
}

async function handleSubmit(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const submitBtn = document.getElementById('submitBtn');
  
  submitBtn.disabled = true;
  submitBtn.textContent = 'Adding Expense...';
  
  try {
    const response = await fetch('/budget/<%= budget._id %>/add-expense', {
      method: 'POST',
      body: formData
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert('Expense added successfully!');
      clearForm();
      // Reload page to show updated budget
      window.location.reload();
    } else {
      alert('Failed to add expense: ' + result.error);
    }
  } catch (error) {
    console.error('Error adding expense:', error);
    alert('Error adding expense: ' + error.message);
  } finally {
    submitBtn.disabled = false;
    submitBtn.textContent = 'Add Expense';
  }
}

function clearForm() {
  document.getElementById('expenseForm').reset();
  removeFile();
  document.getElementById('ocrSection').style.display = 'none';
  ocrData = null;
}
</script>

<%- include('partials/footer') %>
